


********************
 Steg 1
 ********************
env?

Det ska vara möjligt att testköra din webbtjänst från annan domän än den du 
publicerad till (om den är publicerad).

Källkoden ska vara väl kommenterad, och publicerad till ett Github repository.
En README-fil ska finnas i ditt repo som dokumenterar din webbtjänst, 
samt inkluderar URI's (webblänkar) för att använda CRUD. 
Här är ett exempel: README för API


**********************
Steg 2 
*******************************************
validera webbsidorna
Lösningen ska publiceras till publikt tillgänglig webbhost alternativt redovisas med en video-demonstration.
Källkoden ska publiceras till ett Github (eller annan webbtjänst för Git-repos) repository.
Det ska finnas en README-fil som ger en beskrivning av din webbapplikation.

Publicering eller video-demonstration
Det finns alternativ för redovisning av uppgiften:

Publicera din webbsida och webbtjänst på publikt tillgänglig webbhost.
Var noga med att testköra efter publicering, och säkerställ att allting fungerar korrekt.
Skapa en video-demonstration av din lösning där du visar och berättar hur denna fungerar. Video-demonstrationen bör vara max fem minuter lång.

Inlämning
Moment 3.1 lämnas in som rapport i PDF-format.

Moment 3.2 lämnas in som webblänkar till online git-repository för vardera lösning:

en till Uppgift 1 för din webbtjänst,
och en till Uppgift 2 för din webbplats.
Båda dessa ska innehålla en README-fil med beskrivning av lösningen samt eventuellt webblänk(ar) till publicerade laborationer för testkörning.

Bifoga även webblänkar till publicerad webbtjänst och webbplats alternativt länk till video-demonstration som kommentar i inlämningslådan.



Uppgifter
Moment 3.1 - Teoretisk laboration
Besvara följande frågor och lämna in din färdiga rapport i PDF-format.
Använd rapportmallen för tekniska rapporter: rapportmall. (Labrationsrapport - svar på teorifrågor är lämplig för denna uppgift.) Glöm ej korrekt utformad källförteckning.

NoSQL
Förklara begreppet "NoSQL"
Vad är fördelarna med en NoSQL-databas, jämfört med en relationsdatabas?
Kan du se några nackdelar?
Välj tre stycken olika NoSQL-databas-system (NoSQL DBMS) och ge en summerad redogörelse för var och en. Bör vara i storleksordningen 1- max 2 A4-sidor (inklusive eventuella illustrationer)
MongoDB
I MongoDB, om man inte specifikt anger ett värde för "_id"-fältnamnet kommer ett sådant att skapas automatiskt. Hur är detta uppbyggt för att minska risken att två likadana id'n skapas?
Vilka datatyper finns tillgängliga i MongoDB? Vilka tror du är de som du kommer använda flitigast?
Namnge och beskriv kortfattat de olika användarroller som finns tillgängliga i MongoDB.
Anta att man använder följande kommando för att lägga in data i en databas:
use companyAB
db.createCollection("companyRecords")
col1 = db.getCollection("companyRecords")
col1.insertOne({ name: "Jan Jansson", email: "jan.janssons@jansson.se", phone: "555-129234" })
col1.insertOne({ name: "Sven Svensson", email: "sven.svensson@svensson.se", phone: "555-987651" })
Hur skriver man om man vill plocka fram eller skriva ut enbart det dokument som har telefonnummer 555-129234?
Hur skriver man för att uppdatera telefonnumret för Sven Svensson till 555-123456, utan att ändra på övriga uppgifter?


********
klart
*********
****skapa en webbplats som använder Fetch API
****Skapa en webbapplikation som konsumerar din webbtjänst från Steg 1. 
******Gör denna lösning fristående från din webbtjänst.

**Webbplatsen ska läsa ut befintliga poster och ha möjlighet att lägga till nya 
**via ett formulär.

Webbplatsen skall (minst) innehålla tre undersidor:

index.html - Här ska alla poster visas i en lista.
add.html - Här ska det finnas ett formulär för att lägga till nya poster.
about.html - En sida som beskriver webbplatsen och dess syfte, samt information om vilken databas-server som använts.
Skriv även om slutsatser du dragit av uppgiften.
Med lite planering kan denna webbplats i storts återanvändas från föregående moment.

Webbplatsen ska använda Fetch API för att hämta (GET), 
skicka data (POST) samt radera (DELETE) från och till webbtjänsten.
Lösningen ska skapas med HTML, CSS och JavaScript. 
Använd med fördel en automatiserad utvecklingsmiljö från tidigare kurs. 
Och SASS/SCSS är ok att använda.

**********skapa en webbplats med en REST-webbtjänst som använder MongoDB 
*****som databas samt en webbplats som använder denna webbtjänst.

******Uppgiften går ut på att skapa samma REST-webbtjänst du skapade i Moment 2, 
********fast nu med MongoDB som databas-server istället för en relationsdatabas.

*********Uppgiften går ut på att skapa en applikation som hanterar arbetserfarenheter,
*********så som tidigare arbetsplatser, vad du arbetade med, 
*********längd på anställning etctera (du kan användad fiktiv data om så önskas).

******Webbtjänsten skall kunna hantera CRUD-operationer, Create Read Update och Delete.

*******Webbtjänsten skall skapas med hjälp av NodeJs, Express samt en MongoDB-databas.

*******Du väljer själv vilken uppsättning med data du vill lagra, 
*******grundkravet är att databasen innehåller minst fyra stycken fält.
********Använd med fördel någon form av hjälpmedel för scheman, 
*********exempelvis Mongoose eller liknande.

******Data från webbtjänsten ska presenteras i JSON-format.
******Implementerat CRUD (Create Read Update Delete) som använder följande verb: 
*******GET, POST, PUT och DELETE.
*******Webbtjänsten ska ha möjlighet till "cross origin request". 

*******Tänk på att validera input innan lagring i databas, 
*********och returnera tydliga felmeddelanden om något saknas.


Valfri funktionalitet

Möjlighet att uppdatera (PUT) poster i din kurslista.
